<%-include('header')%> 
<%-include('headsection')%> 

    <!-- Start All Title Box -->
    <div class="all-title-box">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <h2>Cart</h2>
                    <ul class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/shop">Shop</a></li>
                        <li class="breadcrumb-item active">Cart</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End All Title Box -->

    <!-- Start Cart  -->
    <div class="cart-box-main">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="table-main table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Images</th>
                                    <th>Product Name</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                    <th>Remove</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% cart.forEach((item) => { %>
                                <input type="hidden" value="<%= item.product %>" name="cartData">
                                <tr id="row<%= item.product._id %>" class="table_row">
                                    <td class="thumbnail-img"><a href="#"><img class="img-fluid" src="<%= item.product.imageUrl[0].url %>" alt="" /></a></td>
                                    <td class="name-pr"><a href="/productview?id=<%= item.product._id %>"><%= item.product.name %></a></td>
                                    <td class="price-pr" value="<%= item.product.price %>"><p>₹ <%= item.product.price %></p></td>
                                    <input type="hidden" name="productprice" value="<%= item.product.price %>">
                                    <input type="hidden" name="productId" value="<%= item.product._id %>">
                                    <td class="quantity-box">
                                        <div class="input-group input-spinner">
                                            <div class="input-group-prepend">
                                                <button onclick="totalPrice('<%= item.product._id %>','dec')" style="min-width: 26px" class="btn btn-decrement btn-spinner" type="button">
                                                    <i class="fi fi-rr-minus"></i>
                                                </button>
                                            </div>
                                            <input disabled type="number" id="<%= item.product._id %>" style="text-align: center;" class="form-control" name="num-product" value="<%= item.quantity %>">
                                            <div class="input-group-append">
                                                <button onclick="totalPrice('<%= item.product._id %>','inc','<%= item.product.stock %>')" style="min-width: 26px" class="btn btn-increment btn-spinner" type="button">
                                                    <i class="fi fi-rr-add"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="total-pr" name="productTotal" id="total-<%= item.product._id %>"><p> <%= item.total %> </p></td>
                                    <input type="hidden" id="product_id<%= item.product._id %>" value="<%= item.product._id %>">
                                    <input type="hidden" name="cart_id" value="<%= item._id %>">
                                    <td class="remove-pr"><a href="#"><button onclick="removeCartalert('<%= item.product._id %>')"><i class="fas fa-times"></i></button></a></td>
                                </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="row my-5">
                <div class="col-lg-8 col-sm-12"></div>
                <div class="col-lg-4 col-sm-12">
                    <div class="order-box">
                        <h3>Order summary</h3>
                        <div class="d-flex">
                            <h4>Sub Total</h4>
                            <div class="ml-auto font-weight-bold"> $ 130 </div>
                        </div>
                        <div class="d-flex">
                            <h4>Shipping Cost</h4>
                            <div class="ml-auto font-weight-bold"> Free </div>
                        </div>
                        <hr>
                        <div class="d-flex gr-total">
                            <h5>Grand Total</h5>
                            <div class="ml-auto h5"> $ 388 </div>
                        </div>
                        <hr>
                    </div>
                </div>
                <div class="col-12 d-flex shopping-box"><a href="checkout.html" class="ml-auto btn hvr-hover">Checkout</a></div>
            </div>
        </div>
    </div>
<!-- End Cart  --> 

<%-include('footer')%> 

<!-- Main Js -->
<script src="/js/vendor/index.js"></script>
<script src="/js/main.js"></script>
<script src="/js/users.js"></script>
<script src="/js/userOrder.js"></script>
<!-- Include SweetAlert CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.min.css">
<!-- Razorpay SDK -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<!-- Include SweetAlert JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.min.js"></script>
<script src="https://kit.fontawesome.com/7fdb179fcf.js" crossorigin="anonymous"></script>





<script>
 
 ////////////////CART & WISHLIST MANAGEMENT////////////////
const productQuantity = async (id, act) => {
    const elem = document.getElementById(id);
    if (act == "inc") elem.value ? (elem.value = Number(elem.value) + 1) : "";
    else if (act == "dec") elem.value > 1 ? (elem.value = Number(elem.value) - 1) : "";

    elem.setAttribute("value", elem.value);
};

const addToCart = async (productId) => {
    
    const addToCartButton = document.getElementById("addToCartBtn");
    
    const productName = document.getElementsByName("productName")[0].value;
    const quantity = document.getElementById(productId).value;
    console.log(quantity,productId)
    const response = await fetch(`/addToCart?id=${productId}&quantity=${quantity}`, {
        method: "GET",
        headers: {
            "content-Type": "application/json",
        },
    });

    let data = await response.json();
    

    if (data.message === "Item already in cart!!") {
        Swal.fire({
            position: "center",
            icon: "success",
            title: "Product is already in cart.\n So quantity increased",
            showConfirmButton: true,
            confirmButtonColor: "#00A300",
        });
    } else {
        Swal.fire({
            position: "center",
            icon: "success",
            title: "Product successfully added to cart",
            showConfirmButton: true,
            confirmButtonColor: "#00A300",
        });
    }
};

const totalPrice = async (id, act, stock) => {
    console.log(11);
    const elem = document.getElementById(id);
    
    if (act == "inc") elem.value ? (elem.value = Number(elem.value) + 1) : "";
    else if (act == "dec") elem.value > 1 ? (elem.value = Number(elem.value) - 1) : "";

    let subTotal = 0;
    let datas = [];
    let length = document.getElementsByName("productTotal").length;
    console.log(length);
    
    for (let i = 0; i < length; i++) {
        
        const quantity = parseFloat(document.getElementsByName("num-product")[i].value);
       
        const price = parseFloat(document.getElementsByName("productprice")[i].value);
    
        const productTotal = isNaN(quantity) || isNaN(price) ? 0 : quantity * price;
        document.getElementsByName("productTotal")[i].innerText = "₹ " + productTotal.toFixed();
        subTotal += productTotal;
      

        datas.push({
            id: document.getElementsByName("productId")[i].value,
            quantity: Number(document.getElementsByName("num-product")[i].value),
        });
    }
    // console.log(document.getElementById("subTotal")); 
    console.log(subTotal);
    document.getElementById("subTotal").innerText = "₹ " + subTotal.toFixed();
    document.getElementById("subTotal2").innerText = "₹ " + subTotal.toFixed();
    console.log(33);
    let data = await fetch("/cartUpdation", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            datas,
        }),
    });
};

const removeCartalert = async (id) => {
    const productId = document.getElementById("product_id" + id).value;
    const cartId = document.getElementsByName("cart_id")[0].value;

    const idObj = { proId: productId, cartId: cartId };

    const result = await Swal.fire({
        title: "Remove item from cart",
        text: "Do you want to remove this\nproduct from your cart?",
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Move to wishlist",
        cancelButtonText: "Yes, remove",
    });

    // Handle the user's response
    if (result.value) {
        addToWishlist(productId, cartId);
    } else if (result.dismiss === Swal.DismissReason.cancel) {
        removeFromCart(productId, cartId);
    }
};

const addToWishlist = async (productId, cartId) => {
    const response = await fetch(`/addToWishlist?productId=${productId}&cartId=${cartId}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        },
    });

    const data = await response.json();

    if (data.message === "Added to wishlist") {
        Swal.fire({
            position: "center",
            icon: "success",
            title: "Product added to wishlist",
            showConfirmButton: true,
            confirmButtonColor: "#00A300",
        });

        document.getElementById("row" + productId).innerHTML = "";
    } else {
        Swal.fire({
            position: "center",
            icon: "warning",
            title: "Product is already in wishlist!",
            showConfirmButton: true,
            confirmButtonColor: "#00A300",
        });
    }
};

const moveToCart = async (productId) => {
    try {
        const response = await fetch(`/addToCartFromWishlist?productId=${productId}`, {
            method: "GET",
            headers: {
                "content-Type": "application/json",
            },
        });

        const data = await response.json();

        if (data.message === "Moved to cart from wishlist") {
            Swal.fire({
                position: "center",
                icon: "success",
                title: "Product is moved to cart",
                showConfirmButton: true,
                confirmButtonColor: "#00A300",
            });
            document.getElementById("row" + productId).innerHTML = "";
        } else if (data.message === "Product is already in cart!!") {
            Swal.fire({
                position: "center",
                icon: "warning",
                title: "Product is already in cart",
                showConfirmButton: true,
                confirmButtonColor: "#00A300",
            });
        } else if (data.message === "Error Occured!") {
            Swal.fire({
                position: "center",
                icon: "warning",
                title: "Something error happened",
                showConfirmButton: true,
                confirmButtonColor: "#00A300",
            });
        }
    } catch (error) {
        console.log(error.message);
    }
};

const removeFromCart = async (productId, cartId) => {
    const response = await fetch(`/removeCart?productId=${productId}&cartId=${cartId}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        },
    });

    if (response.ok) {
        Swal.fire({
            icon: "success",
            title: "Product has been removed successfully",
            showConfirmButton: true,
            confirmButtonText: "OK",
            confirmButtonColor: "#4CAF50",
        });
        document.getElementById("row" + productId).innerHTML = "";
    }
};

const removeFromWishlist = async (productId) => {
    const result = await Swal.fire({
        title: "Remove item from wishlist",
        text: "Do you want to remove this\nproduct from your wishlist?",
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, remove",
    });

    if (result.value) {
        const response = await fetch(`/removeWishlist?productId=${productId}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
        });

        if (response.ok) {
            Swal.fire({
                icon: "success",
                title: "Product has been removed successfully",
                showConfirmButton: true,
                confirmButtonText: "OK",
                confirmButtonColor: "#4CAF50",
            });
            console.log(`.......${productId}`);
            document.getElementById("row" + productId).innerHTML = "";
        } else {
            Swal.fire({
                icon: "warning",
                title: "Somthing error!!",
                showConfirmButton: true,
                confirmButtonText: "DISMISS",
                confirmButtonColor: "#D22B2B",
            });
        }
    }
};

const proceedToCheckout = async () => {
    const response = await fetch("/checkStock", {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        },
    });

    const data = await response.json();

    if (data.message === "In stock") {
        window.location.href = "/checkout";
    } else {
        data.forEach((element) => {
            Swal.fire({
                icon: "error",
                title: `${element.name}\nis out of stock!!`,
                showConfirmButton: true,
                confirmButtonText: "CANCEL",
                confirmButtonColor: "#D22B2B",
            });
        });
    }
};
</script>
